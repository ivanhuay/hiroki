{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hiroki","text":"<p>Hiroki helps you build REST APIs faster than ever using the open source tools and standards you and your team already know.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>Read the full documentation here.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Follow our step-by-step Getting Started guide to begin using Hiroki.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>npm install --save hiroki\n</code></pre>"},{"location":"#create-a-simple-rest-api","title":"Create a Simple REST API","text":"<p>Here's a basic example to get you started. Note that you may need to install and use the <code>body-parser</code> library as well.</p> <pre><code>const express = require('express');\nconst hiroki = require('hiroki');\nconst mongoose = require('mongoose');\nconst bodyParser = require('body-parser');\nconst app = express();\n\n// Model definition\nconst UsersSchema = new mongoose.Schema({name: String});\nconst UserModel = mongoose.model('Users', UsersSchema);\n\n// Importing model\nhiroki.importModel(UserModel);\n\n// Body parser middleware\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\n\n// API route to pass data to Hiroki\napp.use('/api/*', async (req, res) =&gt; {\n    const path = req.originalUrl;\n    const resp = await hiroki.process(path, {\n        method: req.method,\n        body: req.body\n    });\n    res.status(resp.status || 200).json(resp);\n});\n\napp.listen(8012, () =&gt; console.log('Server running on port 8012'));\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>You can customize Hiroki's behavior by changing its configuration:</p> <pre><code>hiroki.setConfig({ \n    basePath: '/api/v2' // default is '/api'\n});\n</code></pre>"},{"location":"#changelog","title":"Changelog","text":""},{"location":"#v200","title":"v2.0.0","text":"<ul> <li>Hiroki is now backend-agnostic. Express has been removed as a dependency.</li> <li>Mongoose version has been updated.</li> <li>The 'share' feature has been removed. Please check if this impacts your usage.</li> </ul> <p>Full Changelog</p>"},{"location":"#license","title":"License","text":"<p>Hiroki is licensed under the MIT License.</p>"},{"location":"changelog/","title":"changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":"<ul> <li>v2.0.0: <ul> <li>hiroki should be now backend agnostic. Express removed as dependency.</li> <li>mongoose version updated</li> <li>share will be removed for this version. Check if this would be usefull.</li> </ul> </li> <li>v0.2.7:<ul> <li><code>shareFormat</code> &amp; <code>beforeShareEnd</code> methods added to format share response.</li> <li>Node v7 support removed.</li> <li>docs for shared.</li> </ul> </li> <li>v0.2.5 <code>fastUpdate</code> option added. This enabled a faster way to update for higher performance.</li> <li>v0.2.3 Critical bugfix: decorator error with delete method. Test added for cover that.</li> <li>v0.2.2 Params <code>$push</code> and <code>$pull</code> working for PUT method. For doing this a custom Assign method was added to hiroki, because of that we made a benchmark test to measure this performance impact. Check it Here.</li> <li>v0.2.0 Share Query path added. check the docs.</li> <li>v0.1.3 MongooseConnector added, dependencies update no breaking changes. In future releases, new connectors would be added.</li> <li>v0.1.2 Bugfix decorator for put route with :id as parameter</li> <li>v0.1.1: Bugfix count with conditions error.</li> <li>v0.1.0:<ul> <li>PUT request fire pre save hook in Mongoose Schema.</li> <li>PUT update by condition only update one document.</li> <li>findOneAndUpdate method removed from PUT request.</li> </ul> </li> <li>v0.0.9: Add support for new conditions format.</li> </ul> <pre><code>ej: GET /api/users?conditions[active]=true\n</code></pre> <ul> <li>v0.0.8: fix general request function affect all routes. This type of decorators affected all the routes.</li> </ul> <pre><code>...\ncontroller.request((req,res,next) =&gt; {\n  res.status(401).json({});\n})\n</code></pre> <p>now it only affects the route of that collection</p>"},{"location":"getting-started/","title":"Getting started with hiroki","text":"<p>This guide provides step-by-step instructions for constructing your initial REST API with Hiroki. Please note that certain aspects of this tutorial may not adhere to best practices, but they have been simplified to make the example easier to understand.</p>"},{"location":"getting-started/#setup","title":"Setup","text":"<ul> <li>First we must create a project folder.</li> </ul> <pre><code>mkdir hello-hiroki\ncd hello-hiroki\n</code></pre> <ul> <li>Now we have to create a <code>package.json</code> file.</li> </ul> <pre><code>npm init -y\n</code></pre> <ul> <li>Install dependencies.</li> </ul> <pre><code>npm i --save express mongoose body-parser hiroki\n</code></pre>"},{"location":"getting-started/#project-folders","title":"Project folders","text":"<ul> <li>Create a model folder.</li> </ul> <pre><code>mkdir models\n</code></pre> <p>in this folder we have to create our models.</p>"},{"location":"getting-started/#create-the-first-model","title":"Create the first model","text":"<p>create a model file <code>(models/book.js)</code> in models folder.</p> <ul> <li><code>models/book.js</code></li> </ul> <pre><code>const mongoose = require('mongoose');\n\nconst Book = new mongoose.Schema({\n  title: String,\n  description: String\n});\n\nmodule.exports = mongoose.model('Book', Book);\n</code></pre> <p>Create a index file for models.</p> <p><code>models/index.js</code></p> <pre><code>const Book = require('./book');\n\nmodule.exports = {\n  Book\n}\n</code></pre>"},{"location":"getting-started/#the-server-file","title":"The server file","text":"<p>Create a file <code>app.js</code>.</p>"},{"location":"getting-started/#step-by-step","title":"step by step:","text":"<ul> <li>Import dependencies:</li> </ul> <pre><code>const express = require('express');\nconst mongoose = require('mongoose');\nconst models = require('./models');\nconst bodyParser = require('body-parser');\nconst hiroki = require('hiroki');\n</code></pre> <ul> <li>Create the express app and use body-parser.</li> </ul> <pre><code>const app = express();\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended: false}));\n</code></pre> <ul> <li>Connect to mongo:</li> </ul> <pre><code>mongoose.connect('mongodb://localhost:27017/test')\n  .then(()=&gt;{\n    console.log('connection succes!');\n  })\n</code></pre> <ul> <li>Build the rest api:</li> </ul> <pre><code>hiroki.importModels(models)\n</code></pre> <ul> <li>Handle errors:</li> </ul> <pre><code>app.use(function(req, res, next) {\n    let err = new Error('Not Found');\n    err.status = 404;\n    next(err);\n});\napp.use('/api/*', async(req, res) =&gt; {\n    const path = req.originalUrl;\n    const resp = await hiroki.process(path, {\n        method: req.method,\n        body: req.body\n    });\n    res.status(resp.status || 200).json(resp);\n});\n</code></pre> <ul> <li>The end: add the app listen</li> </ul> <pre><code>app.listen(3030);\nconsole.log('server listening on port 3030...');\n</code></pre>"},{"location":"getting-started/#file-appjs","title":"File app.js:","text":"<p>This is the complete file.</p> <pre><code>const express = require('express');\nconst mongoose = require('mongoose');\nconst models = require('./models');\nconst bodyParser = require('body-parser');\nconst hiroki = require('hiroki');\nconst app = express();\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended: false}));\n\nmongoose.connect('mongodb://localhost:27017/test')\n  .then(()=&gt;{\n    console.log('connection succes!');\n  });\n\nhiroki.importModels(models);\n\napp.use(function(req, res, next) {\n    let err = new Error('Not Found');\n    err.status = 404;\n    next(err);\n});\n\napp.use('/api/*', async(req, res) =&gt; {\n    const path = req.originalUrl;\n    const resp = await hiroki.process(path, {\n        method: req.method,\n        body: req.body\n    });\n    res.status(resp.status || 200).json(resp);\n});\n\n\napp.listen(3030);\nconsole.log('server listening on port 3030...');\n</code></pre>"},{"location":"getting-started/#start-application","title":"Start application","text":"<pre><code>node app.js\n</code></pre> <p>now you can open <code>http://localhost:3030/api/books</code>.</p> <p>have fun!</p>"},{"location":"getting-started/#remember","title":"Remember:","text":"<ul> <li>GET: get documents.</li> <li>POST: create one document.</li> <li>PUT: update one document.</li> <li>DELETE: remove one document.</li> </ul>"},{"location":"getting-started/#source-code","title":"Source code:","text":"<p>HERE</p>"},{"location":"docs/methods/","title":"Methods","text":"<p>Detailed methods of hiroki objects.</p>"},{"location":"docs/methods/#importmodel","title":"importModel:","text":"<pre><code>hiroki.importModel(model, options);\n</code></pre> <ul> <li>model: Mongoose model object.</li> <li>options: options json</li> </ul>"},{"location":"docs/methods/#importmodels","title":"importModels:","text":"<pre><code>hiroki.importModels(models, options);\n</code></pre> <ul> <li>models: model objects array or object. The object should be { ModelOne, ModelTwo }</li> <li>options: options json</li> </ul>"},{"location":"docs/methods/#options-format","title":"Options format:","text":"<pre><code>options: {\n    fastUpdate: 'disabled', // 'enabled', 'disabled', 'optional' faster update without getting the updated document.\n    basePath: '/api', //default from config.\n    disabledMethods: '', // It could be ['get', 'post', 'put', 'delete']\n    disabledPluralize: false, // to disable the default pluralized name in the path\n}\n</code></pre>"},{"location":"docs/methods/#setconfig","title":"setConfig:","text":"<pre><code>hiroki.setConfig(options);\n</code></pre> <p>Config format:</p> <pre><code>config = {\n    basePath: '/api'\n}\n</code></pre>"},{"location":"docs/rest-api/","title":"Request","text":""},{"location":"docs/rest-api/#get","title":"GET","text":"<p>get list of resources or a particular resource using filter or ids.</p>"},{"location":"docs/rest-api/#basic-request","title":"Basic request:","text":"<ul> <li>Basic</li> </ul> <pre><code>GET /api/books\n</code></pre> <p>Response:</p> <pre><code>[\n  {\n    \"id\":\"5d234073a00ebf1921a9225a\",\n    \"title\":\"Example\",\n    \"createdAt\" : ISODate(\"2019-07-08T13:09:07.346Z\"),\n       \"updatedAt\" : ISODate(\"2019-07-08T18:26:01.800Z\"),\n  },\n  {\n    \"id\":\"5d234073a00ebf1921a9225b\",\n    \"title\":\"Example 2\",\n    \"createdAt\" : ISODate(\"2019-07-08T13:02:07.346Z\"),\n     \"updatedAt\" : ISODate(\"2019-07-08T18:28:01.800Z\"),\n  },\n  ...\n]\n</code></pre> <ul> <li>By Id</li> </ul> <pre><code>GET /api/books/5d234073a00ebf1921a9225a\n</code></pre> <pre><code>{\n  \"id\":\"5d234073a00ebf1921a9225a\",\n  \"title\":\"Example\",\n  \"createdAt\" : ISODate(\"2019-07-08T13:09:07.346Z\"),\n   \"updatedAt\" : ISODate(\"2019-07-08T18:26:01.800Z\"),\n}\n</code></pre>"},{"location":"docs/rest-api/#query-filtering","title":"Query filtering:","text":""},{"location":"docs/rest-api/#conditions","title":"Conditions","text":"<p><code>Conditions</code> paramer is like mongoose <code>find</code> parameter but you always should use the stringified version.</p> <ul> <li>Basic Example</li> </ul> <pre><code>    GET /api/books?conditions={ \"title\": \"Example1\" }\n</code></pre> <ul> <li>Using mongoose <code>$near</code></li> </ul> <pre><code>    GET /api/people?conditions={ \"location\": { \"$near\": [44, -97] } }\n</code></pre> <ul> <li>Using mongoose <code>$search</code></li> </ul> <pre><code>    GET /api/people?conditions={ \"$text\": { \"$search\": \"dog bites man\" } }\n</code></pre>"},{"location":"docs/rest-api/#skip","title":"Skip","text":"<p>Same as mongoose <code>skip</code></p> <pre><code>    GET /api/horses?skip=3\n</code></pre> <p>skip the first 3 documents.</p>"},{"location":"docs/rest-api/#limit","title":"Limit","text":"<p>Same as mongoose <code>limit</code>.</p> <pre><code>    GET /api/horses?limit=3\n</code></pre> <p>get only 3 documents.</p>"},{"location":"docs/rest-api/#sort","title":"Sort","text":"<p>Similar to mongoose <code>sort</code>.</p> <p>this example sort by name / decreasing age</p> <pre><code>    GET /api/cheeses?sort=name -age\n</code></pre>"},{"location":"docs/rest-api/#select","title":"Select","text":"<p>Similar to mongoose <code>select</code>. It is a string space separated. Also you can use <code>-[String]</code> to not select some field.</p> <ul> <li>Basic Example</li> </ul> <pre><code>    GET /api/phones?select=name\n</code></pre> <ul> <li>Negative select</li> </ul> <pre><code>    GET /api/phones?select=-_id -year\n</code></pre> <p>this show all the document except <code>_id</code> &amp; <code>year</code>.</p>"},{"location":"docs/rest-api/#populate","title":"Populate","text":"<p>Same as mongoose populate.</p> <ul> <li>Basic Example:</li> </ul> <pre><code>    GET /api/boats?populate=captain\n</code></pre> <ul> <li>Using match</li> </ul> <pre><code>    GET /api/cities?populate={ \"path\": \"captain\", \"match\": { \"age\": \"44\" } }\n</code></pre> <p>The <code>select</code> option of <code>populated</code> documents is disallowed.</p>"},{"location":"docs/rest-api/#count","title":"Count","text":"<p>Same as mongoose <code>count</code>.</p> <ul> <li>Basic:</li> </ul> <pre><code>    GET /api/stereos?count=true\n</code></pre> <ul> <li>Using conditions:</li> </ul> <pre><code>    GET /api/stereos?count=true&amp;conditions={\"age\":{\"$gt\":2}}\n</code></pre>"},{"location":"docs/rest-api/#distinct","title":"Distinct","text":"<p>Same as mongoose <code>distinct</code>:</p> <pre><code>    GET /api/restaurants?distinct=category\n</code></pre> <p>Detailed version of this document.</p>"},{"location":"docs/rest-api/#post","title":"POST","text":"<p>this option is to create documents.</p> <ul> <li>Basic:</li> </ul> <pre><code>POST /api/birds\nbody:\n{\n  \"name\": \"poli\",\n  \"age\":3\n}\n</code></pre> <p>No mistery here. If the document is created you will receive a 200 status with the document.</p>"},{"location":"docs/rest-api/#put","title":"PUT","text":"<p>Updating documents.</p>"},{"location":"docs/rest-api/#basic","title":"Basic:","text":"<p>This request will update a particular document.</p> <pre><code>PUT /api/books/:id\nBody:\n{\n  title: 'new title',\n  tags: ['new tags']\n}\n</code></pre>"},{"location":"docs/rest-api/#update-with-conditions","title":"Update with conditions:","text":"<p>Also you can update documents using a <code>condition</code> filter as a query param.</p> <pre><code>PUT /api/books/?conditions={\"tag\":\"asd\"}\nBody:\n{\n  title: 'new title',\n  tags: ['new tags']\n}\n</code></pre> <p>This will update all documents that satisfy the conditions filter.</p>"},{"location":"docs/rest-api/#the-pull-and-push-param","title":"The <code>$pull</code> and <code>$push</code> param:","text":"<p>Append or remove an element from an array.</p> <ul> <li>$push:</li> </ul> <pre><code>PUT /api/books/?conditions={\"tag\":\"asd\"}\nBody:\n{\n  title: 'new title',\n  tags: {$push:['new tags']}\n}\n</code></pre> <p>This will add the new tag to the previous list of tags.</p> <ul> <li>$pull: if you want to remove an element from an array you can use the <code>$pull</code> param.</li> </ul> <pre><code>PUT /api/books/?conditions={\"tag\":\"asd\"}\nBody:\n{\n  title: 'new title',\n  tags: {$pull:['asd']}\n}\n</code></pre> <p>This will remove the <code>asd</code> tag from the existing list.</p>"},{"location":"docs/rest-api/#delete","title":"DELETE","text":"<p>DANGER HERE</p> <p>It's possible to delete a document using a request DELETE with the id as a parameter.</p> <pre><code>DELETE /api/books/5c5303574ffead2c606d773b\n</code></pre> <p>Response: status 200 &amp; deleted document.</p> <p>you can disable the method using disabledMethod config or validate the delete before passing the object to hiroki. </p>"},{"location":"docs/rest-api/query-parameters/","title":"Query Parameters List","text":"<p>Use query options from the client to make dynamic requests.  Query options can be mixed as you see fit.</p>"},{"location":"docs/rest-api/query-parameters/#conditions","title":"conditions","text":"<p>The Mongoose query's <code>find</code> or <code>remove</code> arguments can be customized to take full advantage of the MongoDB query syntax. This allows you to use geolocation, regular expressions, and full text search. Special query operators are supported, and your API clients have access to geolocation, regular expression, and full text search capabilities by default!</p> <pre><code>GET /api/people?conditions={ \"location\": { \"$near\": [44, -97] } }\nGET /api/people?conditions={ \"$text\": { \"$search\": \"dog bites man\" } }\nGET /api/cats?sort=-name&amp;limit=1&amp;conditions={ \"features\": \"stripes\" }\nDELETE /api/people?conditions={ \"name\": { \"$regex\": \"^Bob W\", \"$options\": \"i\" } }\n</code></pre>"},{"location":"docs/rest-api/query-parameters/#skip","title":"Skip","text":"<p>Use the <code>skip</code> query option to exclude the first n matched documents from the response. This is commonly used for implementing pagination functionality.</p> <pre><code>GET /api/horses?skip=3\n</code></pre>"},{"location":"docs/rest-api/query-parameters/#limit","title":"limit","text":"<p>Limit the response document count to n at maximum.</p> <pre><code>GET /api/horses?limit=3\n</code></pre> <p>If both limit and skip are used on a request, the response <code>Link</code> header will be set with extra relations that give URLs for paging.</p>"},{"location":"docs/rest-api/query-parameters/#sort","title":"sort","text":"<p>Sort response documents by the given criteria. Here's how you'd sort the collection by <code>name</code> in ascending order, then by <code>age</code> in descending order.</p> <pre><code>GET /api/cheeses?sort=name -age\n</code></pre>"},{"location":"docs/rest-api/query-parameters/#select","title":"select","text":"<p>Set which fields should be selected for response documents.</p> <pre><code>    GET /api/phones?select=-_id -year\n</code></pre> <p>It is not permitted to use the <code>select</code> query option to select deselected paths.  This is to allow a mechanism for hiding fields from client software.</p> <p>You can deselect paths in the Mongoose schema definition using <code>select: false</code> or in the controller by calling e.g. <code>controller.select('-foo')</code>.  Your server middleware will be able to select these fields as usual using <code>query.select</code>, while preventing the client from selecting the field.</p> <p>Note that mixing inluding and excluding fields causes an error.</p>"},{"location":"docs/rest-api/query-parameters/#populate","title":"populate","text":"<p>Set which fields should be populated for response documents.  See the Mongoose population documentation for more information.  The string or object syntax can be used:</p> <pre><code>GET /api/boats?populate=captain\nGET /api/cities?populate={ \"path\": \"captain\", \"match\": { \"age\": \"44\" } }\n</code></pre> <p>The <code>select</code> option of <code>populate</code> is disallowed.  Only paths deselected at the model level will be deselected in populate queries.</p>"},{"location":"docs/rest-api/query-parameters/#count","title":"count","text":"<p>May be set to true for GET requests to specify that a count should be returned instead of documents</p> <pre><code>GET /api/stereos?count=true\n</code></pre>"},{"location":"docs/rest-api/query-parameters/#distinct","title":"distinct","text":"<p>Set to a path name to retrieve an array of distinct values.</p> <pre><code>GET /api/restaurants?distinct=category\n</code></pre> <p>this documentation is based on baucis wiki</p>"},{"location":"docs/rest-api/query-parameters/#requests","title":"Requests","text":""},{"location":"docs/rest-api/query-parameters/#update-using-put","title":"Update using PUT","text":"<p>to update documents there are two options using PUT request.</p> <ul> <li>PUT /api/:collection/:id</li> <li>PUT /api/:collection?conditions[example]=true and Body object</li> </ul> <p>it can be updated using the id as a parameter or by sending the conditions object. In both cases, only one document is updated</p>"},{"location":"docs/rest-api/query-parameters/#example","title":"Example:","text":"<pre><code>PUT /api/books?conditions={\"title\":\"El juguete rabioso\"}\nPUT /api/books/5c5303574ffead2c606d773b\n\n#Body:\n{\n    author: 'Roberto Arlt'\n}\n</code></pre>"},{"location":"docs/rest-api/query-parameters/#delete-document","title":"Delete document","text":"<p>it is possible to delete a document using a request DELETE with the id as a parameter</p> <pre><code>DELETE /api/books/5c5303574ffead2c606d773b\n</code></pre>"},{"location":"docs/rest-api/query-parameters/#update-documents","title":"Update documents","text":"<p>For make an update we use the <code>PUT</code> method</p>"},{"location":"docs/rest-api/query-parameters/#basic-put-request","title":"Basic Put Request","text":"<p>This request will update a particular document</p> <pre><code>PUT /api/books/:id\nBody:\n{\n  title: 'new title',\n  tags: ['new tags']\n}\n</code></pre>"},{"location":"docs/rest-api/query-parameters/#update-using-conditions","title":"Update Using conditions","text":"<p>Also you can update documents using a <code>condition</code> filter as a query param.</p> <pre><code>PUT /api/books/?conditions={\"tag\":\"asd\"}\nBody:\n{\n  title: 'new title',\n  tags: ['new tags']\n}\n</code></pre> <p>This will update all documents that satisfy the conditions filter.</p>"},{"location":"docs/rest-api/query-parameters/#the-pull-and-push-param","title":"The $pull and $push param","text":"<p>You can these params for append or remove an element from an array.</p> <pre><code>PUT /api/books/?conditions={\"tag\":\"asd\"}\nBody:\n{\n  title: 'new title',\n  tags: {$push:['new tags']}\n}\n</code></pre> <p>this will add the new tag to the previous list of tags.</p> <p>if you want to remove an element from an array you can use the $pull param.</p> <pre><code>PUT /api/books/?conditions={\"tag\":\"asd\"}\nBody:\n{\n  title: 'new title',\n  tags: {$pull:['asd']}\n}\n</code></pre> <p>this will remove the <code>asd</code> tag from the existing list.</p>"},{"location":"v0.2.9/","title":"Getting started with hiroki","text":"<p>In this tutorial we are going to build our first rest API using hiroki. Some things in this tutorial aren't the best practice but this is to keep the example simpler as possible.</p>"},{"location":"v0.2.9/#setup","title":"Setup","text":"<ul> <li>First we must create a project folder.</li> </ul> <pre><code>mkdir hello-hiroki\ncd hello-hiroki\n</code></pre> <ul> <li>Now we have to create a <code>package.json</code> file.</li> </ul> <pre><code>npm init -y\n</code></pre> <ul> <li>Install dependencies.</li> </ul> <pre><code>npm i --save express mongoose body-parser hiroki\n</code></pre>"},{"location":"v0.2.9/#project-folders","title":"Project folders","text":"<ul> <li>Create a model folder.</li> </ul> <pre><code>mkdir models\n</code></pre> <p>in this folder we have to create our models.</p>"},{"location":"v0.2.9/#create-the-first-model","title":"Create the first model","text":"<p>create a model file <code>(models/book.js)</code> in models folder.</p> <ul> <li><code>models/book.js</code></li> </ul> <pre><code>const mongoose = require('mongoose');\n\nconst Book = new mongoose.Schema({\n  title: String,\n  description: String\n});\n\nmodule.exports = mongoose.model('Book', Book);\n</code></pre> <p>Create a index file for models.</p> <p><code>models/index.js</code></p> <pre><code>const Book = require('./book');\n\nmodule.exports = {\n  Book\n}\n</code></pre>"},{"location":"v0.2.9/#the-server-file","title":"The server file","text":"<p>Create a file <code>app.js</code>.</p>"},{"location":"v0.2.9/#step-by-step","title":"step by step:","text":"<ul> <li>Import dependencies:</li> </ul> <pre><code>const express = require('express');\nconst mongoose = require('mongoose');\nconst models = require('./models');\nconst bodyParser = require('body-parser');\nconst hiroki = require('hiroki');\n</code></pre> <ul> <li>Create the express app and use body-parser.</li> </ul> <pre><code>const app = express();\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended: false}));\n</code></pre> <ul> <li>Connect to mongo:</li> </ul> <pre><code>mongoose.connect('mongodb://localhost:27017/test')\n  .then(()=&gt;{\n    console.log('connection succes!');\n  })\n</code></pre> <ul> <li>Build the rest api:</li> </ul> <pre><code>Object.keys(models).forEach((model)=&gt;{\n  hiroki.rest(model);\n})\napp.use(hiroki.build());\n</code></pre> <ul> <li>Handle errors:</li> </ul> <pre><code>app.use(function(req, res, next) {\n    let err = new Error('Not Found');\n    err.status = 404;\n    next(err);\n});\napp.use(function(error, req, res, next) {\n    console.error('handleError: ', error);\n    return res.status(error.status || 500).json({\n        status: error.status,\n        error: error.message,\n        stack: error.stack\n    });\n});\n</code></pre> <ul> <li>The end: add the app listen</li> </ul> <pre><code>app.listen(3030);\nconsole.log('server listening on port 3030...');\n</code></pre>"},{"location":"v0.2.9/#file-appjs","title":"File app.js:","text":"<p>This is the complete file.</p> <pre><code>const express = require('express');\nconst mongoose = require('mongoose');\nconst models = require('./models');\nconst bodyParser = require('body-parser');\nconst hiroki = require('hiroki');\nconst app = express();\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended: false}));\n\nmongoose.connect('mongodb://localhost:27017/test')\n  .then(()=&gt;{\n    console.log('connection succes!');\n  })\n\nObject.keys(models).forEach((model)=&gt;{\n  hiroki.rest(model);\n})\napp.use(hiroki.build());\n\n\napp.use(function(req, res, next) {\n    let err = new Error('Not Found');\n    err.status = 404;\n    next(err);\n});\napp.use(function(error, req, res, next) {\n    console.error('handleError: ', error);\n    return res.status(error.status || 500).json({\n        status: error.status,\n        error: error.message,\n        stack: error.stack\n    });\n});\n\n\napp.listen(3030);\nconsole.log('server listening on port 3030...');\n</code></pre>"},{"location":"v0.2.9/#start-application","title":"Start application","text":"<pre><code>node app.js\n</code></pre> <p>now you can open <code>http://localhost:3030/api/books</code>.</p> <p>have fun!</p>"},{"location":"v0.2.9/#remember","title":"Remember:","text":"<ul> <li>GET: get documents.</li> <li>POST: create one document.</li> <li>PUT: update one document.</li> <li>DELETE: remove one document.</li> </ul>"},{"location":"v0.2.9/#source-code","title":"Source code:","text":"<p>HERE</p>"},{"location":"v0.2.9/extending-hiroki/configuration/","title":"Configuration","text":"<p>using <code>hiroki.rest</code> you can pass as a second parameter a configuration object.</p> <pre><code>\nconst options = {\n    shareQueryEnabled: false, //Bool\n    fastUpdate: 'enabled', //Enum - options enabled, disabled, optional\n    disabledPluralize: false //Bool\n};\nhiroki.rest(model, options);\n\n</code></pre> <ul> <li>shareQueryEnabled: enable shared queries route. (more info here)[#share-query]</li> <li>fastUpdate: with enabled UPDATE methods run faster but pre save method of models won't run. There are some posibles values:</li> <li>optional: with optional you have to send a query param <code>?fast=true</code></li> <li>enabled: always working.</li> <li>disabled: not working.</li> </ul>"},{"location":"v0.2.9/extending-hiroki/decorators/","title":"Extending Hiroki","text":"<p>you can easly extend hiroji using a simple express middleware.</p>"},{"location":"v0.2.9/extending-hiroki/decorators/#using-decorators","title":"Using decorators","text":"<p><code>hiroki.rest</code> return a <code>Controller</code> object.</p> <p>see details of controller methods here.</p>"},{"location":"v0.2.9/extending-hiroki/decorators/#example","title":"Example","text":"<pre><code>...\nconst app = express();\nconst UsersSchema = new mongoose.Schema({name});\nmongoose.model('Users', UsersSchema);\n\nconst controller = hiroki.rest('Users');\ncontroller.request('get', (req,res,next) =&gt;{\n  req.query.limit = 3; //override query params limit\n  next();\n})\napp.use('/api', hiroki.build());\napp.listen(8012);\n</code></pre>"},{"location":"v0.2.9/extending-hiroki/overview/","title":"Controller Object","text":"<p><code>hiroki.rest</code> return a <code>Controller</code> object.</p> <p>this object build routes for a particular mongoose model.</p> <pre><code>const controller = hiroki.rest(model);\n</code></pre>"},{"location":"v0.2.9/extending-hiroki/overview/#structure","title":"Structure","text":""},{"location":"v0.2.9/extending-hiroki/overview/#methods","title":"Methods","text":"<ul> <li>request: extend functionality using middlewares before hiroki native middlewares.</li> <li>build: build specific route. (hiroki.build run build for each controller)</li> </ul>"},{"location":"v0.2.9/extending-hiroki/overview/#statics-methods","title":"Statics methods","text":"<ul> <li>Controller.getRouter: return the current express router.</li> </ul>"},{"location":"v0.2.9/extending-hiroki/overview/#set-properties","title":"Set properties","text":"<ul> <li>disabledMethods: String with disabled routes. <code>Ej: disabledMethods = \"get post\"''</code></li> <li>outgoing: format middleware before response.</li> <li>beforeEnd: after format route.</li> </ul>"},{"location":"v0.2.9/extending-hiroki/overview/#details-usage","title":"Details Usage","text":"<p>detail of use for some useful functions</p>"},{"location":"v0.2.9/extending-hiroki/overview/#request","title":"Request","text":"<p><code>controler.request(methods, middleware)</code> enable to add middleware before hiroki routes. methods(String): methods separated by spaces. <code>get post put delete</code></p> <p>if you wish you can ignore the <code>methods</code> parameter and the middleware will apply to all methods.</p> <p>Example:</p> <pre><code>...\nconst app = express();\nconst UsersSchema = new mongoose.Schema({name});\nmongoose.model('Users', UsersSchema);\n\nconst controller = hiroki.rest('Users');\ncontroller.request((req, res, next) =&gt; {\n  //do something\n  //...\n  next();\n});\ncontroller.request('delete post put', (req,res,next) =&gt;{\n  req.status(401).json({error:'unauthorized'});\n})\napp.use('/api', hiroki.build());\napp.listen(8012);\n\n\n</code></pre>"},{"location":"v0.2.9/extending-hiroki/overview/#disabled-methods","title":"Disabled methods","text":"<p>DisabledMethods alows you to disable some hiroki methods.</p> <p>request with this methods return <code>404</code> status.</p> <p>Example:</p> <pre><code>...\nconst controller = hiroki.rest('Users');\ncontroller.disabledMethods = 'delete put';\napp.use('/api', hiroki.build());\napp.listen(8012);\n\n</code></pre>"},{"location":"v0.2.9/extending-hiroki/overview/#outgoing","title":"Outgoing","text":"<p>Outgoing allows you to add a formatting function before the output. The function receives each document and is executed once for each document.</p> <pre><code>...\nconst controller = hiroki.rest('Users');\ncontroller.outGoing = function(doc) {\n  doc.outName = doc.name.toUpperCase()\n  return doc\n};\napp.use('/api', hiroki.build());\napp.listen(8012);\n\n</code></pre>"},{"location":"v0.2.9/extending-hiroki/overview/#beforeend","title":"BeforeEnd","text":"<p><code>beforeEnd</code> allows you to add a middleware that is executed before returning the server response and after formatting all the documents</p> <p>within this function you can manipulate the object req.rest</p> <p><code>req.rest</code> can contain up to 3 parameters: count, response (formatted documents) and status (http status)</p>"},{"location":"v0.2.9/extending-hiroki/overview/#reqrest-structure","title":"req.rest structure","text":"<pre><code>{\n  \"count\": \"Number\",\n  \"response\": \"Docs\",\n  \"status\": \"Number\"\n}\n</code></pre>"},{"location":"v0.2.9/extending-hiroki/overview/#beforeend-usage","title":"beforeEnd usage","text":"<pre><code>controller.beforeEnd = function(req,res,next){\n  doSomething();\n  next(); //hiroki make the response\n}\n</code></pre>"},{"location":"v0.2.9/rest-api/","title":"Usage, methods &amp; parameters","text":""},{"location":"v0.2.9/rest-api/#get","title":"GET","text":"<p>get list of resources or a particular resource using filter or ids.</p>"},{"location":"v0.2.9/rest-api/#basic-request","title":"Basic request:","text":"<ul> <li>Basic</li> </ul> <pre><code>GET /api/books\n</code></pre> <p>Response:</p> <pre><code>[\n  {\n    \"id\":\"5d234073a00ebf1921a9225a\",\n    \"title\":\"Example\",\n    \"createdAt\" : ISODate(\"2019-07-08T13:09:07.346Z\"),\n       \"updatedAt\" : ISODate(\"2019-07-08T18:26:01.800Z\"),\n  },\n  {\n    \"id\":\"5d234073a00ebf1921a9225b\",\n    \"title\":\"Example 2\",\n    \"createdAt\" : ISODate(\"2019-07-08T13:02:07.346Z\"),\n     \"updatedAt\" : ISODate(\"2019-07-08T18:28:01.800Z\"),\n  },\n  ...\n]\n</code></pre> <ul> <li>By Id</li> </ul> <pre><code>GET /api/books/5d234073a00ebf1921a9225a\n</code></pre> <pre><code>{\n  \"id\":\"5d234073a00ebf1921a9225a\",\n  \"title\":\"Example\",\n  \"createdAt\" : ISODate(\"2019-07-08T13:09:07.346Z\"),\n   \"updatedAt\" : ISODate(\"2019-07-08T18:26:01.800Z\"),\n}\n</code></pre>"},{"location":"v0.2.9/rest-api/#query-filtering","title":"Query filtering:","text":""},{"location":"v0.2.9/rest-api/#conditions","title":"Conditions","text":"<p><code>Conditions</code> paramer is like mongoose <code>find</code> parameter but you always should use the stringified version.</p> <ul> <li>Basic Example</li> </ul> <pre><code>    GET /api/books?conditions={ \"title\": \"Example1\" }\n</code></pre> <ul> <li>Using mongoose <code>$near</code></li> </ul> <pre><code>    GET /api/people?conditions={ \"location\": { \"$near\": [44, -97] } }\n</code></pre> <ul> <li>Using mongoose <code>$search</code></li> </ul> <pre><code>    GET /api/people?conditions={ \"$text\": { \"$search\": \"dog bites man\" } }\n</code></pre>"},{"location":"v0.2.9/rest-api/#skip","title":"Skip","text":"<p>Same as mongoose <code>skip</code></p> <pre><code>    GET /api/horses?skip=3\n</code></pre> <p>skip the first 3 documents.</p>"},{"location":"v0.2.9/rest-api/#limit","title":"Limit","text":"<p>Same as mongoose <code>limit</code>.</p> <pre><code>    GET /api/horses?limit=3\n</code></pre> <p>get only 3 documents.</p>"},{"location":"v0.2.9/rest-api/#sort","title":"Sort","text":"<p>Similar to mongoose <code>sort</code>.</p> <p>this example sort by name / decreasing age</p> <pre><code>    GET /api/cheeses?sort=name -age\n</code></pre>"},{"location":"v0.2.9/rest-api/#select","title":"Select","text":"<p>Similar to mongoose <code>select</code>. It is a string space separated. Also you can use <code>-[String]</code> to not select some field.</p> <ul> <li>Basic Example</li> </ul> <pre><code>    GET /api/phones?select=name\n</code></pre> <ul> <li>Negative select</li> </ul> <pre><code>    GET /api/phones?select=-_id -year\n</code></pre> <p>this show all the document except <code>_id</code> &amp; <code>year</code>.</p>"},{"location":"v0.2.9/rest-api/#populate","title":"Populate","text":"<p>Same as mongoose populate.</p> <ul> <li>Basic Example:</li> </ul> <pre><code>    GET /api/boats?populate=captain\n</code></pre> <ul> <li>Using match</li> </ul> <pre><code>    GET /api/cities?populate={ \"path\": \"captain\", \"match\": { \"age\": \"44\" } }\n</code></pre> <p>The <code>select</code> option of <code>populated</code> documents is disallowed.</p>"},{"location":"v0.2.9/rest-api/#count","title":"Count","text":"<p>Same as mongoose <code>count</code>.</p> <ul> <li>Basic:</li> </ul> <pre><code>    GET /api/stereos?count=true\n</code></pre> <ul> <li>Using conditions:</li> </ul> <pre><code>    GET /api/stereos?count=true&amp;conditions={\"age\":{\"$gt\":2}}\n</code></pre>"},{"location":"v0.2.9/rest-api/#distinct","title":"Distinct","text":"<p>Same as mongoose <code>distinct</code>:</p> <pre><code>    GET /api/restaurants?distinct=category\n</code></pre> <p>Detailed version of this document.</p>"},{"location":"v0.2.9/rest-api/#post","title":"POST","text":"<p>this option is to create documents.</p> <ul> <li>Basic:</li> </ul> <pre><code>POST /api/birds\nbody:\n{\n  \"name\": \"poli\",\n  \"age\":3\n}\n</code></pre> <p>No mistery here. If the document is created you will receive a 200 status with the document.</p>"},{"location":"v0.2.9/rest-api/#put","title":"PUT","text":"<p>Updating documents.</p>"},{"location":"v0.2.9/rest-api/#basic","title":"Basic:","text":"<p>This request will update a particular document.</p> <pre><code>PUT /api/books/:id\nBody:\n{\n  title: 'new title',\n  tags: ['new tags']\n}\n</code></pre>"},{"location":"v0.2.9/rest-api/#update-with-conditions","title":"Update with conditions:","text":"<p>Also you can update documents using a <code>condition</code> filter as a query param.</p> <pre><code>PUT /api/books/?conditions={\"tag\":\"asd\"}\nBody:\n{\n  title: 'new title',\n  tags: ['new tags']\n}\n</code></pre> <p>This will update all documents that satisfy the conditions filter.</p>"},{"location":"v0.2.9/rest-api/#the-pull-and-push-param","title":"The <code>$pull</code> and <code>$push</code> param:","text":"<p>Append or remove an element from an array.</p> <ul> <li>$push:</li> </ul> <pre><code>PUT /api/books/?conditions={\"tag\":\"asd\"}\nBody:\n{\n  title: 'new title',\n  tags: {$push:['new tags']}\n}\n</code></pre> <p>This will add the new tag to the previous list of tags.</p> <ul> <li>$pull: if you want to remove an element from an array you can use the <code>$pull</code> param.</li> </ul> <pre><code>PUT /api/books/?conditions={\"tag\":\"asd\"}\nBody:\n{\n  title: 'new title',\n  tags: {$pull:['asd']}\n}\n</code></pre> <p>This will remove the <code>asd</code> tag from the existing list.</p>"},{"location":"v0.2.9/rest-api/#delete","title":"DELETE","text":"<p>DANGER HERE</p> <p>It's possible to delete a document using a request DELETE with the id as a parameter.</p> <pre><code>DELETE /api/books/5c5303574ffead2c606d773b\n</code></pre> <p>Response: status 200 &amp; deleted document.</p> <p>Personally i recommend use decorators to validate all delete request.</p>"},{"location":"v0.2.9/rest-api/detailed-documentation/","title":"Detailed documentation","text":""},{"location":"v0.2.9/rest-api/detailed-documentation/#query-string-parameters","title":"Query string parameters","text":"<p>Use query options from the client to make dynamic requests.  Query options can be mixed as you see fit.</p>"},{"location":"v0.2.9/rest-api/detailed-documentation/#conditions","title":"conditions","text":"<p>Set the Mongoose query's <code>find</code> or <code>remove</code> arguments.  This can take full advtange of the MongoDB query syntax, using geolocation, regular expressions, or full text search.  Special query operators are fine, and in fact geolocation, regular expression, and full text search capabilities are available to your API clients by default!</p> <pre><code>GET /api/people?conditions={ \"location\": { \"$near\": [44, -97] } }\nGET /api/people?conditions={ \"$text\": { \"$search\": \"dog bites man\" } }\nGET /api/cats?sort=-name&amp;limit=1&amp;conditions={ \"features\": \"stripes\" }\nDELETE /api/people?conditions={ \"name\": { \"$regex\": \"^Bob W\", \"$options\": \"i\" } }\n</code></pre>"},{"location":"v0.2.9/rest-api/detailed-documentation/#skip","title":"skip","text":"<p>Skip sending the first n matched documents in the response.  Useful for paging.</p> <pre><code>GET /api/horses?skip=3\n</code></pre>"},{"location":"v0.2.9/rest-api/detailed-documentation/#limit","title":"limit","text":"<p>Limit the response document count to n at maximum.</p> <pre><code>GET /api/horses?limit=3\n</code></pre> <p>If both limit and skip are used on a request, the response <code>Link</code> header will be set with extra relations that give URLs for paging.</p>"},{"location":"v0.2.9/rest-api/detailed-documentation/#sort","title":"sort","text":"<p>Sort response documents by the given criteria. Here's how you'd sort the collection by <code>name</code> in ascending order, then by <code>age</code> in descending order.</p> <pre><code>GET /api/cheeses?sort=name -age\n</code></pre>"},{"location":"v0.2.9/rest-api/detailed-documentation/#select","title":"select","text":"<p>Set which fields should be selected for response documents.</p> <pre><code>    GET /api/phones?select=-_id -year\n</code></pre> <p>It is not permitted to use the <code>select</code> query option to select deselected paths.  This is to allow a mechanism for hiding fields from client software.</p> <p>You can deselect paths in the Mongoose schema definition using <code>select: false</code> or in the controller by calling e.g. <code>controller.select('-foo')</code>.  Your server middleware will be able to select these fields as usual using <code>query.select</code>, while preventing the client from selecting the field.</p> <p>Note that mixing inluding and excluding fields causes an error.</p>"},{"location":"v0.2.9/rest-api/detailed-documentation/#populate","title":"populate","text":"<p>Set which fields should be populated for response documents.  See the Mongoose population documentation for more information.  The string or object syntax can be used:</p> <pre><code>GET /api/boats?populate=captain\nGET /api/cities?populate={ \"path\": \"captain\", \"match\": { \"age\": \"44\" } }\n</code></pre> <p>The <code>select</code> option of <code>populate</code> is disallowed.  Only paths deselected at the model level will be deselected in populate queries.</p>"},{"location":"v0.2.9/rest-api/detailed-documentation/#count","title":"count","text":"<p>May be set to true for GET requests to specify that a count should be returned instead of documents</p> <pre><code>GET /api/stereos?count=true\n</code></pre>"},{"location":"v0.2.9/rest-api/detailed-documentation/#distinct","title":"distinct","text":"<p>Set to a path name to retrieve an array of distinct values.</p> <pre><code>GET /api/restaurants?distinct=category\n</code></pre> <p>this documentation is based on baucis wiki</p>"},{"location":"v0.2.9/rest-api/detailed-documentation/#requests","title":"Requests","text":""},{"location":"v0.2.9/rest-api/detailed-documentation/#update-using-put","title":"Update using PUT","text":"<p>to update documents there are two options using PUT request.</p> <ul> <li>PUT /api/:collection/:id</li> <li>PUT /api/:collection?conditions[example]=true and Body object</li> </ul> <p>it can be updated using the id as a parameter or by sending the conditions object. In both cases, only one document is updated</p>"},{"location":"v0.2.9/rest-api/detailed-documentation/#example","title":"Example:","text":"<pre><code>PUT /api/books?conditions={\"title\":\"El juguete rabioso\"}\nPUT /api/books/5c5303574ffead2c606d773b\n\n#Body:\n{\n    author: 'Roberto Arlt'\n}\n</code></pre>"},{"location":"v0.2.9/rest-api/detailed-documentation/#delete-document","title":"Delete document","text":"<p>it is possible to delete a document using a request DELETE with the id as a parameter</p> <pre><code>DELETE /api/books/5c5303574ffead2c606d773b\n</code></pre>"},{"location":"v0.2.9/rest-api/detailed-documentation/#update-documents","title":"Update documents","text":"<p>For make an update we use the <code>PUT</code> method</p>"},{"location":"v0.2.9/rest-api/detailed-documentation/#basic-put-request","title":"Basic Put Request","text":"<p>This request will update a particular document</p> <pre><code>PUT /api/books/:id\nBody:\n{\n  title: 'new title',\n  tags: ['new tags']\n}\n</code></pre>"},{"location":"v0.2.9/rest-api/detailed-documentation/#update-using-conditions","title":"Update Using conditions","text":"<p>Also you can update documents using a <code>condition</code> filter as a query param.</p> <pre><code>PUT /api/books/?conditions={\"tag\":\"asd\"}\nBody:\n{\n  title: 'new title',\n  tags: ['new tags']\n}\n</code></pre> <p>This will update all documents that satisfy the conditions filter.</p>"},{"location":"v0.2.9/rest-api/detailed-documentation/#the-pull-and-push-param","title":"The $pull and $push param","text":"<p>You can these params for append or remove an element from an array.</p> <pre><code>PUT /api/books/?conditions={\"tag\":\"asd\"}\nBody:\n{\n  title: 'new title',\n  tags: {$push:['new tags']}\n}\n</code></pre> <p>this will add the new tag to the previous list of tags.</p> <p>if you want to remove an element from an array you can use the $pull param.</p> <pre><code>PUT /api/books/?conditions={\"tag\":\"asd\"}\nBody:\n{\n  title: 'new title',\n  tags: {$pull:['asd']}\n}\n</code></pre> <p>this will remove the <code>asd</code> tag from the existing list.</p>"},{"location":"v0.2.9/rest-api/one-request/","title":"One request multiple query using share route.","text":"<p>This feature is available since v0.2.0</p> <p>now we have a new path <code>/api/share/:shareCondition</code>.</p>"},{"location":"v0.2.9/rest-api/one-request/#configuration","title":"Configuration:","text":"<p>you can use multiple queries in only one request using the <code>shareQueryEnabled</code> configuration for the controllers that you want enabled.</p> <p>Also check the configuration page.</p>"},{"location":"v0.2.9/rest-api/one-request/#usage-details","title":"Usage Details:","text":"<p><code>:shareCondition</code> is a stringify object with this format:</p> <pre><code>{\n    modelName:{ params }\n}\n</code></pre> <p>the <code>params</code> object is like the tradicional params.</p> <p><code>params</code>:</p> <pre><code>{\n  limit: ...\n  select: ...\n  count: ...\n  skip: ...\n  conditions: ...\n}\n</code></pre> <p>now instead of query params is an object.</p> <p>you can check details here</p>"},{"location":"v0.2.9/rest-api/one-request/#format-response","title":"Format response:","text":"<p>you can use two methods to controll/format the response.</p> <ul> <li><code>shareFormat</code>: this should be a sync function to format in the same way as the map function but it receives the collection as a second parameter.</li> <li><code>beforeShareEnd</code>: this a express middleware that run before send the response, here you can do any sync process that you want. The formated response is in the <code>req.shareResponse</code> object. Remember to run <code>next()</code> doing that you want.</li> </ul>"},{"location":"v0.2.9/rest-api/one-request/#examples","title":"Examples","text":""},{"location":"v0.2.9/rest-api/one-request/#api-build","title":"API build:","text":"<pre><code>'use strict';\nconst hiroki = require('../../index');\nconst models = require('./models');\nconst decorators = require('./decorators');\n\nfunction buildHiroki() {\n    Object.keys(models).forEach((modelName) =&gt; {\n        const options = modelName === 'Draws' ? {fastUpdate: 'enabled'} : {shareQueryEnabled:true};\n        const controller = hiroki.rest(models[modelName], options);\n        if (decorators.hasOwnProperty(modelName)) {\n            decorators[modelName](controller);\n        }\n    });\n    hiroki.shareFormat = (doc, collection) =&gt; {\n        if(collection === 'books') {\n            doc.book = true;\n        }\n        return doc;\n    };\n    hiroki.beforeShareEnd = (req, res, next) =&gt; {\n        req.shareResponse.fakeCollection = [1];\n        next();\n    };\n    return hiroki.build();\n}\n\nmodule.exports = buildHiroki;\n\n</code></pre>"},{"location":"v0.2.9/rest-api/one-request/#example-request","title":"Example Request","text":"<p><code>GET '/api/share/{\"books\":{},\"users\":{\"conditions\":{\"_id\":\"5c01997482c8985ad9a7eb5c\"}}}'</code></p>"},{"location":"v0.2.9/rest-api/one-request/#response","title":"Response","text":"<pre><code>{\n  users:\n   [ { role: [],\n       books: [],\n       _id: '5c01997482c8985ad9a7eb5b',\n       name: 'test user',\n       email: 'test@lts.com',\n       __v: 0 } ],\n  books:\n   [ { tag: [Array],\n       _id: '5cfa87a6615ab0eb6fed5cf6',\n       title: 'first book',\n       tagCount: 1,\n       __v: 0 } ]\n}\n</code></pre>"}]}